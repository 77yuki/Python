import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt


T = 1.75
sigma = 0.3
alpha = 0.4
X_init = 17
nos1 = 1000
nos2 = 10000
nos3 = 100000
N = 300


X_0 = X_init
deltat = T/N
X_up = sigma * np.sqrt(deltat)
X_down = - sigma * np.sqrt(deltat)
p = 1/2 * (1 + alpha/sigma*np.sqrt(deltat))


V1 = np.ones(nos1) * X_0
V2 = np.ones(nos2) * X_0
V3 = np.ones(nos3) * X_0

# 1st
for i in range(N):
    rand = np.random.uniform(0, 1, nos1)
    ptof = np.less(rand, p) 
    V1 = V1 + ptof*X_up + (1-ptof)*X_down
    
print('1st number of simulations = ' + str(nos1))
print('1st Observed Mean = ' + str(np.mean(V1)))
print('1st Observed Standard deviation = ' + str(np.std(V1)))
theo_mean = X_init+alpha*T
print('1st Theoretical Mean = ' + str(theo_mean))
theo_sd = sigma*np.sqrt(T)
print('1st Theoretical Standard Deviation = ' + str(theo_sd))


# generate a histogram
max_interval = X_init + N*sigma*np.sqrt(deltat) + sigma*np.sqrt(deltat)
min_interval = X_init - N*sigma*np.sqrt(deltat) - sigma*np.sqrt(deltat)
all_bins = np.linspace(min_interval, max_interval, num = N+2)

x_axis = np.linspace(min_interval, max_interval, num = 1000)
standard_line = stats.norm.pdf(x_axis, theo_mean, theo_sd)
plt.hist(V1, all_bins, density = True)
plt.plot(x_axis, standard_line, color = 'orange')
plt.ylabel('Probability Density')
plt.xlabel('X(t) Value')


# 2nd
for i in range(N):
    rand = np.random.uniform(0, 1, nos2)
    ptof = np.less(rand, p) 
    V2 = V2 + ptof*X_up + (1-ptof)*X_down
    
print('2nd number of simulations = ' + str(nos2))
print('2nd Observed Mean = ' + str(np.mean(V2)))
print('2nd Observed Standard deviation = ' + str(np.std(V2)))
theo_mean = X_init+alpha*T
print('2nd Theoretical Mean = ' + str(theo_mean))
theo_sd = sigma*np.sqrt(T)
print('2nd Theoretical Standard Deviation = ' + str(theo_sd))


# generate a histogram
max_interval = X_init + N*sigma*np.sqrt(deltat) + sigma*np.sqrt(deltat)
min_interval = X_init - N*sigma*np.sqrt(deltat) - sigma*np.sqrt(deltat)
all_bins = np.linspace(min_interval, max_interval, num = N+2)

x_axis = np.linspace(min_interval, max_interval, num = 1000)
standard_line = stats.norm.pdf(x_axis, theo_mean, theo_sd)
plt.figure()
plt.hist(V2, all_bins, density = True)
plt.plot(x_axis, standard_line, color = 'orange')
plt.ylabel('Probability Density')
plt.xlabel('X(t) Value')


# 3rd
for i in range(N):
    rand = np.random.uniform(0, 1, nos3)
    ptof = np.less(rand, p) 
    V3 = V3 + ptof*X_up + (1-ptof)*X_down
    
print('3rd number of simulations = ' + str(nos3))
print('3rd Observed Mean = ' + str(np.mean(V3)))
print('3rd Observed Standard deviation = ' + str(np.std(V3)))
theo_mean = X_init+alpha*T
print('3rd Theoretical Mean = ' + str(theo_mean))
theo_sd = sigma*np.sqrt(T)
print('3rd Theoretical Standard Deviation = ' + str(theo_sd))


# generate a histogram
max_interval = X_init + N*sigma*np.sqrt(deltat) + sigma*np.sqrt(deltat)
min_interval = X_init - N*sigma*np.sqrt(deltat) - sigma*np.sqrt(deltat)
all_bins = np.linspace(min_interval, max_interval, num = N+2)

x_axis = np.linspace(min_interval, max_interval, num = 1000)
standard_line = stats.norm.pdf(x_axis, theo_mean, theo_sd)
plt.figure()
plt.hist(V3, all_bins, density = True)
plt.plot(x_axis, standard_line, color = 'orange')
plt.ylabel('Probability Density')
plt.xlabel('X(t) Value')
